const { ethers } = require("hardhat");

/**
 * üöÄ Âø´ÈÄüÊµãËØïÈÉ®ÁΩ≤ËÑöÊú¨
 * 
 * Áî®‰∫éÂø´ÈÄüÈÉ®ÁΩ≤Ê†∏ÂøÉÂêàÁ∫¶ËøõË°åÂºÄÂèëÊµãËØï
 * ÂåÖÂê´Âü∫Êú¨ÈÖçÁΩÆÔºåÈÄÇÂêàÂºÄÂèëÁéØÂ¢É‰ΩøÁî®
 */
async function main() {
    console.log("üöÄ Âø´ÈÄüÊµãËØïÈÉ®ÁΩ≤ÂºÄÂßã...\\n");
    
    const [deployer, user1, user2] = await ethers.getSigners();
    console.log("ÈÉ®ÁΩ≤ËÄÖ:", deployer.address);
    console.log("‰ΩôÈ¢ù:", ethers.formatEther(await deployer.provider.getBalance(deployer.address)), "ETH\\n");
    
    const contracts = {};
    
    // 1. ÈÉ®ÁΩ≤Á®éÊî∂Â§ÑÁêÜÂô®
    console.log("üì¶ ÈÉ®ÁΩ≤Á®éÊî∂Â§ÑÁêÜÂô®...");
    const SimpleTaxHandler = await ethers.getContractFactory("SimpleTaxHandler");
    const taxHandler = await SimpleTaxHandler.deploy(deployer.address, ethers.ZeroAddress);
    await taxHandler.waitForDeployment();
    contracts.taxHandler = await taxHandler.getAddress();
    console.log("‚úÖ", contracts.taxHandler);
    
    // 2. ÈÉ®ÁΩ≤ÂõΩÂ∫ìÂ§ÑÁêÜÂô®
    console.log("\\nüì¶ ÈÉ®ÁΩ≤ÂõΩÂ∫ìÂ§ÑÁêÜÂô®...");
    const SimpleTreasuryHandler = await ethers.getContractFactory("SimpleTreasuryHandler");
    const treasuryHandler = await SimpleTreasuryHandler.deploy(
        deployer.address,
        user1.address, // Ëê•ÈîÄÈí±ÂåÖ
        deployer.address, // ÂºÄÂèëÈí±ÂåÖ
        deployer.address  // ÊµÅÂä®ÊÄßÈí±ÂåÖ
    );
    await treasuryHandler.waitForDeployment();
    contracts.treasuryHandler = await treasuryHandler.getAddress();
    console.log("‚úÖ", contracts.treasuryHandler);
    
    // 3. ÈÉ®ÁΩ≤FLOKI‰ª£Â∏Å
    console.log("\\nüì¶ ÈÉ®ÁΩ≤FLOKI‰ª£Â∏Å...");
    const FLOKI = await ethers.getContractFactory("FLOKI");
    const floki = await FLOKI.deploy(
        "Floki Test",
        "FLOKI",
        contracts.taxHandler,
        contracts.treasuryHandler
    );
    await floki.waitForDeployment();
    contracts.floki = await floki.getAddress();
    console.log("‚úÖ", contracts.floki);
    
    // 4. ÈÉ®ÁΩ≤PEPE‰ª£Â∏Å
    console.log("\\nüì¶ ÈÉ®ÁΩ≤PEPE‰ª£Â∏Å...");
    const PepeToken = await ethers.getContractFactory("PepeToken");
    const pepe = await PepeToken.deploy(ethers.parseUnits("1000000", 18));
    await pepe.waitForDeployment();
    contracts.pepe = await pepe.getAddress();
    console.log("‚úÖ", contracts.pepe);
    
    // 5. ÈÉ®ÁΩ≤ÊµÅÂä®ÊÄßÊ±†
    console.log("\\nüì¶ ÈÉ®ÁΩ≤ÊµÅÂä®ÊÄßÊ±†...");
    const LiquidityPool = await ethers.getContractFactory("LiquidityPool");
    const liquidityPool = await LiquidityPool.deploy(contracts.floki, deployer.address);
    await liquidityPool.waitForDeployment();
    contracts.liquidityPool = await liquidityPool.getAddress();
    console.log("‚úÖ", contracts.liquidityPool);
    
    // 6. Âü∫Êú¨ÈÖçÁΩÆ
    console.log("\\n‚öôÔ∏è  Âü∫Êú¨ÈÖçÁΩÆ...");
    await treasuryHandler.setTokenContract(contracts.floki);
    await treasuryHandler.setLiquidityPool(contracts.liquidityPool);
    
    // ËÆæÁΩÆÂü∫Êú¨Á®éÁéá
    await taxHandler.setDefaultTaxRate(500); // 5%
    
    // ËÆæÁΩÆ‰∫§ÊòìÈôêÂà∂
    await floki.setTradingLimits(
        true,
        ethers.parseUnits("100000", 9), // ÊúÄÂ§ß‰∫§Êòì10‰∏áFLOKI
        ethers.parseUnits("500000", 9), // ÊúÄÂ§ßÊåÅÂ∏Å50‰∏áFLOKI
        10, // ÊØèÊó•10Ê¨°‰∫§Êòì
        30  // 30ÁßíÂÜ∑Âç¥
    );
    
    console.log("‚úÖ ÈÖçÁΩÆÂÆåÊàê");
    
    // 7. Âø´ÈÄüÊµãËØï
    console.log("\\nüß™ Âø´ÈÄüÂäüËÉΩÊµãËØï...");
    
    // ÊµãËØïËΩ¨Ë¥¶ÂíåÁ®éÊî∂
    const transferAmount = ethers.parseUnits("1000", 9);
    await taxHandler.setTaxExemption(deployer.address, false);
    
    const balanceBefore = await floki.balanceOf(user2.address);
    const treasuryBefore = await floki.balanceOf(contracts.treasuryHandler);
    
    await floki.transfer(user2.address, transferAmount);
    
    const balanceAfter = await floki.balanceOf(user2.address);
    const treasuryAfter = await floki.balanceOf(contracts.treasuryHandler);
    
    const received = balanceAfter - balanceBefore;
    const tax = treasuryAfter - treasuryBefore;
    
    console.log(`ËΩ¨Ë¥¶: ${ethers.formatUnits(transferAmount, 9)} FLOKI`);
    console.log(`Âà∞Ë¥¶: ${ethers.formatUnits(received, 9)} FLOKI`);
    console.log(`Á®éÊî∂: ${ethers.formatUnits(tax, 9)} FLOKI`);
    console.log(`Á®éÁéá: ${(Number(tax) * 100 / Number(transferAmount)).toFixed(2)}%`);
    
    await taxHandler.setTaxExemption(deployer.address, true);
    
    console.log("\\nüéâ Âø´ÈÄüÈÉ®ÁΩ≤ÊµãËØïÂÆåÊàêÔºÅ");
    console.log("\\nüìã ÂêàÁ∫¶Âú∞ÂùÄ:");
    Object.entries(contracts).forEach(([name, address]) => {
        console.log(`${name}: ${address}`);
    });
    
    return contracts;
}

main()
    .then((contracts) => {
        console.log("\\n‚úÖ Âø´ÈÄüÈÉ®ÁΩ≤ÊàêÂäüÔºÅ");
        process.exit(0);
    })
    .catch((error) => {
        console.error("\\n‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
        process.exit(1);
    });
